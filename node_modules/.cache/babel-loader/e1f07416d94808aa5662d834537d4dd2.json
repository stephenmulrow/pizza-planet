{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smulr\\\\Documents\\\\challenges\\\\pizza-manager\\\\src\\\\components\\\\Chef.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [todos, setTodos] = useState(() => {\n    const savedTodos = localStorage.getItem(\"todos\");\n    if (savedTodos) {\n      return JSON.parse(savedTodos);\n    } else {\n      return [];\n    }\n  });\n  const [todo, setTodo] = useState(\"\");\n  // boolean state to know if we are editing (this will let us display\n  // different inputs based on a condition (conditional rendering)\n  const [isEditing, setIsEditing] = useState(false);\n  // object state to set so we know which todo item we are editing\n  const [currentTodo, setCurrentTodo] = useState({});\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n  function handleInputChange(e) {\n    setTodo(e.target.value);\n  }\n\n  // function to get the value of the edit input and set the new state\n  function handleEditInputChange(e) {\n    // set the new state value to what's currently in the edit input box\n    setCurrentTodo({\n      ...currentTodo,\n      text: e.target.value\n    });\n    console.log(currentTodo);\n  }\n  function handleFormSubmit(e) {\n    e.preventDefault();\n    if (todo !== \"\") {\n      setTodos([...todos, {\n        id: todos.length + 1,\n        text: todo.trim()\n      }]);\n    }\n    setTodo(\"\");\n  }\n  function handleEditFormSubmit(e) {\n    e.preventDefault();\n    handleUpdateTodo(currentTodo.id, currentTodo);\n  }\n  function handleDeleteClick(id) {\n    const removeItem = todos.filter(todo => {\n      return todo.id !== id;\n    });\n    setTodos(removeItem);\n  }\n\n  // function to edit a todo item\n  function handleUpdateTodo(id, updatedTodo) {\n    // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\n    // if the id's match, use the second parameter to pass in the updated todo object\n    // otherwise just use old todo\n    const updatedItem = todos.map(todo => {\n      return todo.id === id ? updatedTodo : todo;\n    });\n    // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\n    setIsEditing(false);\n    // update the todos state with the updated todo\n    setTodos(updatedItem);\n  }\n\n  // function to handle when the \"Edit\" button is clicked\n  function handleEditClick(todo) {\n    // set editing to true\n    setIsEditing(true);\n    // set the currentTodo to the todo item that was clicked\n    setCurrentTodo({\n      ...todo\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Toppings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Buzz Lightyear (cheese with pepporoni)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Woody (bacon, sausage, and chicken)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Andy's Room          \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"anchovies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"spinach\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"peppers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), isEditing ?\n    /*#__PURE__*/\n    // if we are editing - display the edit todo input\n    // make sure to add the handleEditFormSubmit function in the \"onSubmit\" prop\n    _jsxDEV(\"form\", {\n      onSubmit: handleEditFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"editTodo\",\n        children: \"Edit topping: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"editTodo\",\n        type: \"text\",\n        placeholder: \"Edit todo\",\n        value: currentTodo.text,\n        onChange: handleEditInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"buttons\",\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsEditing(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // if we are not editing - display the add todo input\n    // make sure to add the handleFormSubmit function in the \"onSubmit\" prop\n    _jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Toppings to your Pizza from the list of available toppings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"todo\",\n        children: \"Add topping: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"todo\",\n        type: \"text\",\n        placeholder: \"Name of topping\",\n        value: todo,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"buttons\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"todo-list\",\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [todo.text, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttons\",\n          onClick: () => handleEditClick(todo),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttons\",\n          onClick: () => handleDeleteClick(todo.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n// import React from \"react\";\n\n// export default function Chef() {\n//   const initialList = [\n//     {\n//       id: \"a\",\n//       name: \"Buzz Lightyear\",\n//       description: \"cheese with pepporoni\"\n//     },\n//     {\n//       id: \"b\",\n//       name: \"Woody\",\n//       description: \"bacon, sausage, and chicken\"\n//     },\n//     {\n//       id: \"c\",\n//       name: \"Andy's Room\",\n//       description: \"peppers, onions, and spiach\"\n//     },\n//     {\n//       id: \"c\",\n//       name: \"Wild Bill\",\n//       description: \"bbq pork, chicken, and hot sauce\"\n//     },\n//     {\n//       id: \"c\",\n//       name: \"Rex\",\n//       description: \"peppers, chicken, and salami\"\n//     }\n//   ];\n\n//   const [list, setList] = React.useState(initialList)\n//   const [name, setName] = React.useState('')\n//   const [description, setDescription] = React.useState('')\n\n//   function handleChange(event) {\n//     setName(event.target.value)\n//     // input field state\n//   }\n\n//   function handleToppings(event){\n//     setDescription(event.target.value)\n//   }\n\n//   function handleRemove(id){\n//     const newList = list.filter((name) => {\n//       return name.id !== id});\n\n//     setList(newList)\n//   }\n//   function handleDeleteClick(id) {\n//     const removeItem = list.filter((name) => {\n//       return name.id !== id;\n//     });\n//     setList(removeItem);\n//   }\n\n//   function deleteToppings(id) {\n//     const removeTopping = list.filter((description) => {\n//       return description.id != id;\n//     });\n//     setList(removeTopping);\n//   }\n\n//   function handleAdd(){\n//     const newList = list.concat({name})\n\n//     setList(newList)\n//     // add item to list\n//   }\n\n//   function addTopping(){\n//     const newList = list.concat({description})\n\n//     setList(newList)\n//   }\n//   return (\n//     <div id=\"main\">\n//       <h1>Welcome Chef!</h1>\n//       <h2>First, take a look at our list of available Pizzas, and their respective toppings</h2>\n\n//       <ul>\n//         {list.map((item) =>(\n//           <li key={item.id}>{item.name}\n//           <button className=\"buttons\" onClick={()=> handleDeleteClick(name.id)}>delete</button>\n//           <br></br>\n//           {item.description}\n//           <button className=\"buttons\" onClick={()=> deleteToppings(description.id)}>delete</button>\n//           </li>\n\n//         ))}\n\n//       </ul>\n//       <h3>If you would like to create a new pizza, enter in the name of the pizza, and the toppings that will go on the pizza </h3>\n//       <input type=\"text\" placeholder=\"name of pizza\" value={name} onChange={handleChange}/>\n\n//       <button className=\"buttons\" type=\"button\" onClick={handleAdd}>\n//         Add Pizza\n//       </button>\n//       <input type=\"text\" placeholder=\"toppings on pizza\" value={description} onChange={handleToppings}/>\n//       <button className=\"buttons\" type=\"button\" onClick={addTopping}>\n//         Add Toppings\n//       </button>\n\n//     </div>\n//   )\n// }\n_s(App, \"vh3s5m4+7RlTfHqmzrvDvMYUwBk=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dropdown","DropdownButton","App","todos","setTodos","savedTodos","localStorage","getItem","JSON","parse","todo","setTodo","isEditing","setIsEditing","currentTodo","setCurrentTodo","setItem","stringify","handleInputChange","e","target","value","handleEditInputChange","text","console","log","handleFormSubmit","preventDefault","id","length","trim","handleEditFormSubmit","handleUpdateTodo","handleDeleteClick","removeItem","filter","updatedTodo","updatedItem","map","handleEditClick"],"sources":["C:/Users/smulr/Documents/challenges/pizza-manager/src/components/Chef.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\n\r\nexport default function App() {\r\n  const [todos, setTodos] = useState(() => {\r\n    const savedTodos = localStorage.getItem(\"todos\");\r\n    if (savedTodos) {\r\n      return JSON.parse(savedTodos);\r\n    } else {\r\n      return [];\r\n    }\r\n  });\r\n  const [todo, setTodo] = useState(\"\");\r\n  // boolean state to know if we are editing (this will let us display\r\n  // different inputs based on a condition (conditional rendering)\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  // object state to set so we know which todo item we are editing\r\n  const [currentTodo, setCurrentTodo] = useState({});\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function handleInputChange(e) {\r\n    setTodo(e.target.value);\r\n  }\r\n\r\n  // function to get the value of the edit input and set the new state\r\n  function handleEditInputChange(e) {\r\n    // set the new state value to what's currently in the edit input box\r\n    setCurrentTodo({ ...currentTodo, text: e.target.value });\r\n    console.log(currentTodo);\r\n  }\r\n\r\n  function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (todo !== \"\") {\r\n      setTodos([\r\n        ...todos,\r\n        {\r\n          id: todos.length + 1,\r\n          text: todo.trim()\r\n        }\r\n      ]);\r\n    }\r\n\r\n    setTodo(\"\");\r\n  }\r\n\r\n  function handleEditFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    handleUpdateTodo(currentTodo.id, currentTodo);\r\n  }\r\n\r\n  function handleDeleteClick(id) {\r\n    const removeItem = todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    setTodos(removeItem);\r\n  }\r\n\r\n  // function to edit a todo item\r\n  function handleUpdateTodo(id, updatedTodo) {\r\n    // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\r\n    // if the id's match, use the second parameter to pass in the updated todo object\r\n    // otherwise just use old todo\r\n    const updatedItem = todos.map((todo) => {\r\n      return todo.id === id ? updatedTodo : todo;\r\n    });\r\n    // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\r\n    setIsEditing(false);\r\n    // update the todos state with the updated todo\r\n    setTodos(updatedItem);\r\n  }\r\n\r\n  // function to handle when the \"Edit\" button is clicked\r\n  function handleEditClick(todo) {\r\n    // set editing to true\r\n    setIsEditing(true);\r\n    // set the currentTodo to the todo item that was clicked\r\n    setCurrentTodo({ ...todo });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Available Toppings</h1>\r\n      <h2>\r\n        <ul>\r\n          <li>\r\n            Buzz Lightyear (cheese with pepporoni)\r\n          </li>\r\n          <li>\r\n          Woody (bacon, sausage, and chicken)\r\n          </li>\r\n          <li>\r\n          Andy's Room          </li>\r\n          <li>\r\n            anchovies\r\n          </li>\r\n          <li>\r\n            spinach\r\n          </li>\r\n          <li>\r\n            peppers\r\n          </li>\r\n        </ul>\r\n      </h2>\r\n      {/* We need to conditionally render different inputs based on if we are in editing mode */}\r\n      {isEditing ? (\r\n        // if we are editing - display the edit todo input\r\n        // make sure to add the handleEditFormSubmit function in the \"onSubmit\" prop\r\n        <form onSubmit={handleEditFormSubmit}>\r\n          {/* we've added an h2 element */}\r\n          <h2>Edit Todo</h2>\r\n          {/* also added a label for the input */}\r\n          <label htmlFor=\"editTodo\">Edit topping: </label>\r\n          {/* notice that the value for the update input is set to the currentTodo state */}\r\n          {/* also notice the handleEditInputChange is being used */}\r\n          <input\r\n            name=\"editTodo\"\r\n            type=\"text\"\r\n            placeholder=\"Edit todo\"\r\n            value={currentTodo.text}\r\n            onChange={handleEditInputChange}\r\n          />\r\n          {/* here we added an \"update\" button element - use the type=\"submit\" on the button which will still submit the form when clicked using the handleEditFormSubmit function */}\r\n          <button type=\"submit\" className=\"buttons\">Update</button>\r\n          {/* here we added a \"Cancel\" button to set isEditing state back to false which will cancel editing mode */}\r\n          <button onClick={() => setIsEditing(false)}>Cancel</button>\r\n        </form>\r\n      ) : (\r\n        // if we are not editing - display the add todo input\r\n        // make sure to add the handleFormSubmit function in the \"onSubmit\" prop\r\n        <form onSubmit={handleFormSubmit}>\r\n          {/* we've added an h2 element */}\r\n          <h2>Add Toppings to your Pizza from the list of available toppings</h2>\r\n          {/* also added a label for the input */}\r\n          <label htmlFor=\"todo\">Add topping: </label>\r\n          {/* notice that the value is still set to the todo state */}\r\n          {/* also notice the handleInputChange is still the same */}\r\n          <input\r\n            name=\"todo\"\r\n            type=\"text\"\r\n            placeholder=\"Name of topping\"\r\n            value={todo}\r\n            onChange={handleInputChange}\r\n          />\r\n          {/* here we just added a \"Add\" button element - use the type=\"submit\" on the button which will still submit the form when clicked using the handleFormSubmit function */}\r\n          <button type=\"submit\" className=\"buttons\">Add</button>\r\n        </form>\r\n      )}\r\n\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo) => (\r\n          <li key={todo.id}>\r\n            {todo.text}\r\n            {/* we are passing the entire todo object to the handleEditClick function*/}\r\n            <button className=\"buttons\" onClick={() => handleEditClick(todo)}>Edit</button>\r\n            <button className=\"buttons\" onClick={() => handleDeleteClick(todo.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from \"react\";\r\n\r\n\r\n// export default function Chef() {\r\n//   const initialList = [\r\n//     {\r\n//       id: \"a\",\r\n//       name: \"Buzz Lightyear\",\r\n//       description: \"cheese with pepporoni\"\r\n//     },\r\n//     {\r\n//       id: \"b\",\r\n//       name: \"Woody\",\r\n//       description: \"bacon, sausage, and chicken\"\r\n//     },\r\n//     {\r\n//       id: \"c\",\r\n//       name: \"Andy's Room\",\r\n//       description: \"peppers, onions, and spiach\"\r\n//     },\r\n//     {\r\n//       id: \"c\",\r\n//       name: \"Wild Bill\",\r\n//       description: \"bbq pork, chicken, and hot sauce\"\r\n//     },\r\n//     {\r\n//       id: \"c\",\r\n//       name: \"Rex\",\r\n//       description: \"peppers, chicken, and salami\"\r\n//     }\r\n//   ];\r\n\r\n//   const [list, setList] = React.useState(initialList)\r\n//   const [name, setName] = React.useState('')\r\n//   const [description, setDescription] = React.useState('')\r\n\r\n//   function handleChange(event) {\r\n//     setName(event.target.value)\r\n//     // input field state\r\n//   }\r\n\r\n//   function handleToppings(event){\r\n//     setDescription(event.target.value)\r\n//   }\r\n\r\n//   function handleRemove(id){\r\n//     const newList = list.filter((name) => {\r\n//       return name.id !== id});\r\n\r\n//     setList(newList)\r\n//   }\r\n//   function handleDeleteClick(id) {\r\n//     const removeItem = list.filter((name) => {\r\n//       return name.id !== id;\r\n//     });\r\n//     setList(removeItem);\r\n//   }\r\n\r\n//   function deleteToppings(id) {\r\n//     const removeTopping = list.filter((description) => {\r\n//       return description.id != id;\r\n//     });\r\n//     setList(removeTopping);\r\n//   }\r\n\r\n//   function handleAdd(){\r\n//     const newList = list.concat({name})\r\n\r\n//     setList(newList)\r\n//     // add item to list\r\n//   }\r\n\r\n//   function addTopping(){\r\n//     const newList = list.concat({description})\r\n\r\n//     setList(newList)\r\n//   }\r\n//   return (\r\n//     <div id=\"main\">\r\n//       <h1>Welcome Chef!</h1>\r\n//       <h2>First, take a look at our list of available Pizzas, and their respective toppings</h2>\r\n  \r\n//       <ul>\r\n//         {list.map((item) =>(\r\n//           <li key={item.id}>{item.name}\r\n//           <button className=\"buttons\" onClick={()=> handleDeleteClick(name.id)}>delete</button>\r\n//           <br></br>\r\n//           {item.description}\r\n//           <button className=\"buttons\" onClick={()=> deleteToppings(description.id)}>delete</button>\r\n//           </li>\r\n          \r\n//         ))}\r\n        \r\n//       </ul>\r\n//       <h3>If you would like to create a new pizza, enter in the name of the pizza, and the toppings that will go on the pizza </h3>\r\n//       <input type=\"text\" placeholder=\"name of pizza\" value={name} onChange={handleChange}/>\r\n\r\n//       <button className=\"buttons\" type=\"button\" onClick={handleAdd}>\r\n//         Add Pizza\r\n//       </button>\r\n//       <input type=\"text\" placeholder=\"toppings on pizza\" value={description} onChange={handleToppings}/>\r\n//       <button className=\"buttons\" type=\"button\" onClick={addTopping}>\r\n//         Add Toppings\r\n//       </button>\r\n     \r\n//     </div>\r\n//   )\r\n// }\r\n"],"mappings":"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AA,GAJ/ElB,IAAI,CAACkB,EAAE;QAAA;QAAA;QAAA;MAAA,QAMjB;IAAC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV;;AAiBA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA,GA/RwB1B,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}